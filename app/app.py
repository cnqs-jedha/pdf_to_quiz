# =========================
# APPLICATION PRINCIPALE GRADIO
# =========================
# Ce fichier contient la d√©finition de l'interface utilisateur principale
# Il organise tous les composants de l'application et g√®re les interactions

# ============================================
# IMPORTS ET D√âPENDANCES
# ============================================

import os  # Pour les variables d'environnement
import json  # Pour manipuler les donn√©es JSON
import random  # Pour m√©langer les questions
from pathlib import Path  # Pour g√©rer les chemins de fichiers

import gradio as gr  # Framework principal pour l'interface web
import pandas as pd  # Pour manipuler les tableaux de donn√©es
import requests  # Pour faire des requ√™tes HTTP vers l'API

# Imports des modules personnalis√©s
from core.config import API_BASE_URL, API_QUESTIONS_PATH, USE_API, REQUIRE_API, BASE_DIR, json_path  # Configuration
from core.check import check_ready_for_gradio  # Pour v√©rifier si l'API est pr√™te
from core.helpers import load_questions  # Pour charger les questions
from ui.style import custom_css  # Styles CSS personnalis√©s
from ui.ui_gradio import start_quiz, check_answer, next_question, restart_quiz, send_drive_link_to_api  # Fonctions de l'interface

# ============================================
# CR√âATION DE L'INTERFACE PRINCIPALE
# ============================================

# Cr√©er l'application Gradio avec les styles personnalis√©s
with gr.Blocks(css=custom_css, title="Quiz App") as app:
    
    # ============================================
    # PAGE D'ENTR√âE : SAISIE DU LIEN GOOGLE DRIVE
    # ============================================
    
    # Page d'erreur/entr√©e (visible par d√©faut)
    with gr.Column(visible=True) as page_erreur:
        gr.Markdown("G√©n√©rez votre quiz via un lien Google Drive")
        drive_input = gr.Textbox(label="Lien Google Drive")  # Champ de saisie pour le lien
        send_quiz_button = gr.Button("Lancer la g√©n√©ration du quiz")  # Bouton pour lancer la g√©n√©ration
        # output = gr.Textbox(label="Statut", interactive=False)  # Champ de statut (comment√©)
        # bouton_retry = gr.Button("üîÑ R√©essayer")  # Bouton de retry (comment√©)

    # ============================================
    # PAGE DE CHARGEMENT : G√âN√âRATION EN COURS
    # ============================================
    
    # Page de chargement (masqu√©e par d√©faut)
    with gr.Column(visible=False) as page_loader:
        gr.Markdown("### ‚è≥ G√©n√©ration du quiz en cours...")
        loader_message = gr.Markdown("Merci de patienter pendant la cr√©ation de votre quiz üîÑ")

    # ============================================
    # PAGE PRINCIPALE : INTERFACE DU QUIZ
    # ============================================
    
    # Page quiz (masqu√©e par d√©faut)
    with gr.Column(visible=False) as page_quiz:
        # ============================================
        # BLOC PRINCIPAL : INTERFACE DU QUIZ
        # ============================================
        
        with gr.Column(elem_classes=["block"]):
            # Bouton pour d√©marrer le quiz
            start_btn = gr.Button("üöÄ D√©marrer le quiz", variant="primary", elem_classes=["primary-btn"])
            
            # Barre de progression du quiz
            progress_bar = gr.HTML(visible=False, elem_id="quiz-progress")
            
            # Affichage de la question
            question = gr.Markdown(visible=False)
            
            # Options de r√©ponse (boutons radio)
            choix = gr.Radio(choices=[], label="Choisis ta r√©ponse :", visible=False, elem_classes=["quiz-radio"], container=False, elem_id="choices-radio")
            
            # Ligne contenant le bouton d'explication et le feedback
            with gr.Row():
                explain_btn = gr.Button("Voir l'explication", visible=False, elem_classes=["explain-btn-rect"])
                feedback = gr.Markdown(visible=False)
            
            # Zone d'affichage de l'explication
            explain_md = gr.Markdown(visible=False)
            
            # Zone pour les scripts (masqu√©e)
            script_injector = gr.HTML(visible=False)
            
            # Affichage du score actuel
            score_display = gr.Markdown(visible=False)
            
            # Bouton pour passer √† la question suivante
            next_btn = gr.Button("‚û°Ô∏è Question suivante", visible=False, variant="secondary")

        # ============================================
        # BLOC DE R√âCAPITULATIF : R√âSULTATS FINAUX
        # ============================================
        
        # Bloc de r√©capitulatif (masqu√© par d√©faut)
        with gr.Column(elem_classes=["block"], visible=False) as recap_block:
            gr.Markdown("### üìä R√©sultats du quiz")
            
            # Affichage du score final avec style color√©
            score_final_display = gr.HTML(visible=False, elem_classes=["score-final"])
            
            # Message d'encouragement
            encouragement_display = gr.Markdown(visible=False, elem_classes=["encouragement"])
            
            # Bilan par th√®me
            bilan_theme_display = gr.Markdown(visible=False, elem_classes=["bilan-theme"])
            
            # Tableau du bilan par th√®me
            bilan_theme_table = gr.Dataframe(
                visible=False, label="", interactive=False, wrap=True, elem_classes=["dataframe"],
                headers=["Th√®me", "Bonnes r√©ponses", "Questions", "% R√©ussite"]
            )
            
            # Titre pour les d√©tails
            details_title = gr.Markdown(visible=False)
            
            # Tableau des r√©sultats d√©taill√©s
            resume_table = gr.Dataframe(visible=False, label="R√©sultats d√©taill√©s", interactive=False, wrap=True,
                                        elem_classes=["dataframe"])
            
            # Bouton pour rejouer
            with gr.Row():
                restart_btn = gr.Button("üîÑ Rejouer", visible=False, variant="primary", elem_classes=["primary-btn"])

    # ============================================
    # √âTATS INTERNES DE L'APPLICATION
    # ============================================
    
    # √âtats pour stocker les donn√©es du quiz
    qs_state = gr.State()  # Liste des questions
    idx_state = gr.State()  # Index de la question actuelle
    score_state = gr.State()  # Score actuel
    done_state = gr.State()  # √âtat de fin de quiz
    resume_state = gr.State()  # R√©sum√© des r√©ponses
    explain_visible = gr.State(False)  # √âtat de visibilit√© de l'explication

    # ============================================
    # D√âFINITION DES SORTIES COMMUNES
    # ============================================
    
    # Liste de tous les √©l√©ments qui peuvent √™tre mis √† jour
    outputs_common = [
        start_btn,  # Bouton d√©marrer
        question, progress_bar, choix, feedback, explain_btn, explain_md, script_injector, score_display,  # √âl√©ments du quiz
        qs_state, idx_state, score_state, done_state, resume_state,  # √âtats internes
        next_btn, score_final_display, encouragement_display, bilan_theme_display,  # √âl√©ments de navigation
        bilan_theme_table, details_title, resume_table, restart_btn, recap_block  # √âl√©ments de r√©capitulatif
    ]

    # ============================================
    # GESTIONNAIRES D'√âV√âNEMENTS PRINCIPAUX
    # ============================================
    
    # Clic sur le bouton "D√©marrer le quiz"
    start_btn.click(fn=start_quiz, outputs=outputs_common)
    
    # Changement de s√©lection dans les options de r√©ponse
    choix.change(fn=check_answer,
                    inputs=[choix, qs_state, idx_state, score_state, done_state, resume_state],
                    outputs=outputs_common)
    
    # ============================================
    # FONCTION POUR PASSER √Ä LA QUESTION SUIVANTE
    # ============================================
    
    def _next_question_with_reset(*args):
        """
        Passe √† la question suivante en r√©initialisant l'√©tat d'explication.
        Cette fonction s'assure que l'explication est masqu√©e avant de passer √† la question suivante.
        """
        # R√©initialiser l'√©tat d'explication avant de passer √† la question suivante
        explain_visible.value = False
        return next_question(*args)
    
    # Clic sur le bouton "Question suivante"
    next_btn.click(fn=_next_question_with_reset,
                    inputs=[qs_state, idx_state, score_state, done_state, resume_state],
                    outputs=outputs_common)
    
    # ============================================
    # GESTION DU BOUTON D'EXPLICATION
    # ============================================
    
    def _toggle_explain(btn_text):
        """
        Bascule l'affichage de l'explication et change le texte du bouton.
        
        Cette fonction d√©tecte le type de bouton (explication ou correction) 
        et adapte le texte en cons√©quence.
        
        Args:
            btn_text (str): Texte actuel du bouton
        
        Returns:
            tuple: Mises √† jour pour l'explication et le bouton
        """
        # Basculer l'√©tat de visibilit√©
        explain_visible.value = not explain_visible.value
        
        if explain_visible.value:
            # Si on affiche l'explication
            if "explication" in btn_text:
                return gr.update(visible=True), gr.update(value="Masquer l'explication")
            else:  # "correction" dans le texte
                return gr.update(visible=True), gr.update(value="Masquer la correction")
        else:
            # Si on masque l'explication
            if "explication" in btn_text:
                return gr.update(visible=False), gr.update(value="Voir l'explication")
            else:  # "correction" dans le texte
                return gr.update(visible=False), gr.update(value="Voir la correction")
    
    def _reset_explain_state():
        """
        R√©initialise l'√©tat d'explication.
        Utilis√©e lors du passage √† la question suivante.
        """
        # R√©initialiser l'√©tat d'explication
        explain_visible.value = False
        return gr.update(visible=False), gr.update(value="Voir l'explication")
    
    # Clic sur le bouton d'explication
    explain_btn.click(fn=_toggle_explain, inputs=[explain_btn], outputs=[explain_md, explain_btn])
    
    # Clic sur le bouton "Rejouer"
    restart_btn.click(fn=restart_quiz, outputs=outputs_common)

    # ============================================
    # GESTIONNAIRE POUR LA G√âN√âRATION DU QUIZ
    # ============================================
    
    # Clic sur le bouton "Lancer la g√©n√©ration du quiz"
    # Cette fonction envoie le lien Google Drive √† l'API et g√®re le processus de g√©n√©ration
    send_quiz_button.click(
        fn=send_drive_link_to_api,  # Fonction qui g√®re l'envoi du lien √† l'API
        inputs=drive_input,  # Entr√©e : le lien Google Drive saisi par l'utilisateur
        outputs=[page_erreur, page_loader, page_quiz, loader_message]  # Sorties : les diff√©rentes pages et le message
    )

# ============================================
# LANCEMENT DE L'APPLICATION
# ============================================

if __name__ == "__main__":
    """
    Point d'entr√©e de l'application.
    Lance le serveur Gradio avec les param√®tres de configuration.
    """
    app.launch( 
        server_name=os.getenv("GRADIO_SERVER_NAME", "0.0.0.0"),  # Adresse du serveur (par d√©faut : toutes les interfaces)
        server_port=int(os.getenv("GRADIO_SERVER_PORT", "7860"))  # Port du serveur (par d√©faut : 7860)
    )
