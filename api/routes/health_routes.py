from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import JSONResponse
from api.models.quiz_models import HealthResponse, ReadyResponse

"""
===========================================================
ROUTES DE SANTÃ‰ ET DE READINESS (health_routes)
===========================================================

Ce module dÃ©finit les routes de vÃ©rification de lâ€™Ã©tat de lâ€™API.

Routes :
- GET /health â†’ indique si lâ€™API est en ligne (simple ping).
- GET /ready â†’ retourne lâ€™Ã©tat de prÃ©paration du pipeline ou du quiz.
- POST /ready â†’ met Ã  jour le message dâ€™Ã©tat envoyÃ© par le pipeline.

Ces endpoints permettent Ã  un client
de vÃ©rifier la disponibilitÃ© et la progression du pipeline.
"""

router = APIRouter(tags=["Health"])

# Pour vÃ©rifier que l'api est en vie
@router.get("/health", response_model=HealthResponse)
def health():
    """VÃ©rifie que l'API est en ligne."""
    return {"status": "ok"}

# Envoie des message d'information du traitement des donnÃ©es par pipeline et quand la gÃ©nÃ©ration du quiz est finie
@router.post("/ready")
async def update_ready(request: Request, data: dict):
    """Mise Ã  jour du message de progression envoyÃ©e par le pipeline."""
    message = data.get("message")
    if not message:
        raise HTTPException(status_code=400, detail="Champ 'message' manquant")
    
    # On stocke le message dans l'Ã©tat global de l'app
    request.app.state.status_message = message
    print(f"ğŸ“© Nouveau message reÃ§u du pipeline : {message}", flush=True)
    
    return {"status": "ok", "message": message}

# Pour lire ready et pas jsute envoyer des infos
@router.get("/ready")
def get_ready(request: Request):
    """Retourne l'Ã©tat de readiness + message du pipeline."""
    message = getattr(request.app.state, "status_message", "En attente de gÃ©nÃ©ration...")

    last_quiz = getattr(request.app.state, "last_received_quiz", None)
    if last_quiz and len(last_quiz.get("quiz", [])) > 0:
        return {"status": "ok", "quiz_count": len(last_quiz["quiz"]), "message": message}

    return JSONResponse(
        status_code=200,
        content={"status": "pending", "quiz_count": 0, "message": message}
    )